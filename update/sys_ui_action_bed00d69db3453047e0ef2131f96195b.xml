<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_ui_action">
    <sys_ui_action action="INSERT_OR_UPDATE">
        <action_name/>
        <active>true</active>
        <client>false</client>
        <client_script_v2/>
        <comments/>
        <condition/>
        <form_action>true</form_action>
        <form_button>true</form_button>
        <form_button_v2>false</form_button_v2>
        <form_context_menu>false</form_context_menu>
        <form_link>false</form_link>
        <form_menu_button_v2>false</form_menu_button_v2>
        <form_style>primary</form_style>
        <hint/>
        <isolate_script>false</isolate_script>
        <list_action>false</list_action>
        <list_banner_button>false</list_banner_button>
        <list_button>false</list_button>
        <list_choice>false</list_choice>
        <list_context_menu>false</list_context_menu>
        <list_link>false</list_link>
        <list_save_with_form_button>false</list_save_with_form_button>
        <list_style/>
        <name>Sync</name>
        <onclick/>
        <order>100</order>
        <script><![CDATA[gs.setProperty('x_snc_dev_meet.current_event',current.id);
syncEvent(current.id,current.name);
action.setRedirectURL(current);


function syncEvent(id,urlname){
	var r = new sn_ws.RESTMessageV2('x_snc_dev_meet.Meetup.com API', 'GET Event');
	r.setStringParameterNoEscape('id', id);
	r.setStringParameterNoEscape('urlname', urlname);
	r.setStringParameterNoEscape('key', gs.getProperty('x_snc_dev_meet.key'));
	var response = r.execute();
	var responseBody = response.getBody();
	var httpStatus = response.getStatusCode();

	if(httpStatus!=200){
		gs.addErrorMessage(responseBody.error.message);
		gs.addErrorMessage(responseBody.error.detail);

	} else {
		responseBody = JSON.parse(responseBody);
		current.link = responseBody.link;
		current.description = responseBody.description;
		current.status = responseBody.status;
		current.update();
		syncAttendees(current.id,current.name,current.status);
		gs.addInfoMessage("Meeting Synced");
		action.setRedirectURL(current);
	}
	return;
}

function syncAttendees(id,urlname,state){
	var meetup = new GlideRecord('x_snc_dev_meet_meetup');
	meetup.get('id',id);
	var api = 'GET RSVP';
	if (state == 'past'){
		api = 'GET Attendees';
	}
	var r = new sn_ws.RESTMessageV2('x_snc_dev_meet.Meetup.com API', api);
	r.setStringParameterNoEscape('id', id);
	r.setStringParameterNoEscape('urlname', urlname);
	r.setStringParameterNoEscape('key', gs.getProperty('x_snc_dev_meet.key'));
	var response = r.execute();
	var responseBody = response.getBody();
	var httpStatus = response.getStatusCode();

	if(httpStatus!=200){
		gs.addErrorMessage(responseBody.error.message);
		gs.addErrorMessage(responseBody.error.detail);

	} else {
		responseBody = JSON.parse(responseBody);
		responseBody.forEach(function(body){
			//gs.addInfoMessage('Syncing '+body.member.name);
			var pic = 'https://secure.meetupstatic.com/img/noPhoto_50.png';
			if(body.member.hasOwnProperty('photo')){
				if(body.member.photo.hasOwnProperty('thumb')){
				pic = body.member.photo.thumb;
				}
				if(body.member.photo.hasOwnProperty('thumb_link')){
				pic = body.member.photo.thumb_link;
				}
			} 
			var rsvp = 'no';
			var guests = 0;
			if(body.hasOwnProperty('rsvp')){
				rsvp = body.rsvp.response;
				guests = body.rsvp.guests;
			}
			if(body.hasOwnProperty('response')){
				rsvp = body.response;
				guests = body.guests;
			}
			var dev = syncDeveloper(body.member.id,body.member.name,pic);
			var attendee = new GlideRecord('x_snc_dev_meet_attendees');
			attendee.addQuery('developer',dev);
			attendee.addQuery('meetup',meetup.sys_id);
			attendee.query();
			//gs.addInfoMessage(attendee.getRowCount());
			attendee.meetup=meetup.sys_id;
			attendee.developer=dev;
			attendee.rsvp=rsvp;
			attendee.guests=guests;
			attendee.status=body.status;
			//gs.addInfoMessage(attendee.getRowCount());
			if (attendee.getRowCount() > 0){
				attendee.updateMultiple();
			} else {
				//gs.addInfoMessage(JSON.stringify(attendee));
				attendee.insert();
			}
		});
	}
	return;
}

function syncDeveloper(id,name,photo) {
	var dev = new GlideRecord('x_snc_dev_meet_developers');
	var find = dev.get("id",id);
	dev.id=id;
	dev.name=name;
	dev.photo=photo;
	if (find){
		return dev.update();
	} else {
		return dev.insert();
	}


}

]]></script>
        <show_insert>true</show_insert>
        <show_multiple_update>false</show_multiple_update>
        <show_query>false</show_query>
        <show_update>true</show_update>
        <sys_class_name>sys_ui_action</sys_class_name>
        <sys_created_by>alex</sys_created_by>
        <sys_created_on>2018-03-12 01:47:33</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>bed00d69db3453047e0ef2131f96195b</sys_id>
        <sys_mod_count>28</sys_mod_count>
        <sys_name>Sync</sys_name>
        <sys_overrides/>
        <sys_package display_value="Developer Meetup" source="x_snc_dev_meet">beeb33c5db7013047e0ef2131f961962</sys_package>
        <sys_policy/>
        <sys_scope display_value="Developer Meetup">beeb33c5db7013047e0ef2131f961962</sys_scope>
        <sys_update_name>sys_ui_action_bed00d69db3453047e0ef2131f96195b</sys_update_name>
        <sys_updated_by>alex</sys_updated_by>
        <sys_updated_on>2018-03-13 13:20:28</sys_updated_on>
        <table>x_snc_dev_meet_meetup</table>
        <ui11_compatible>true</ui11_compatible>
        <ui16_compatible>true</ui16_compatible>
    </sys_ui_action>
</record_update>
